import os

from utilities import h2gpts
from ase.calculators.calculator import FileIOCalculator
from ase.calculators.calculator import CalculatorError, CalculatorSetupError
from ase.calculators.calculator import EnvironmentError, InputError
from ase.calculators.calculator import CalculationFailed, SCFError, ReadError
from ase.calculators.calculator import PropertyNotImplementedError, PropertyNotPresent

required_inputs = ['PSEUDOPOTENTIAL_FILE',
                    'CELL','EXCHANGE_CORRELATION',
                    'FD_GRID','PSEUDOPOTENTIAL_LOCAL',
                    'KPOINT_GRID', 'LATVEC']

default_parameters = {
            # 'label': 'sprc-calc',
            # 'calculation_directory':'sprk.log',

            'BOUNDARY_CONDITION': 2,
            'LATVEC': None,
            'EXCHANGE_CORRELATION': 'LDA_PZ',  # 'LDA'
            'KPOINT_GRID': (1, 1, 1),
            'MIXING_PARAMETER': 0.30,
            'CHEN_DEGREE': 20,
            'NSTATES': None,
            'SMEARING': None,
            'MAXIT_SCF': 100,
            'BETA': 1000,
            'ELEC_TEMP': None,
            'CALC_STRESS': None,
            'CALC_PRES': None,
            'TOL_SCF': 1.00E-05,
            'TOL_POISSON': 1.00E-06,
            'TOL_LANCZOS': 1.00E-02,
            'TOL_PSEUDOCHARGE': 1.00E-08,
            'TWTIME': 999999999.000000,
            'MIXING_PARAMETER': 0.30,
            'MIXING_HISTORY': 7,
            'MIXING_VARIABLE': None,
            'MIXING_PRECOND': None,
            'PULAY_FREQUENCY': 1,
            'PULAY_RESTART': 0,
            'REFERENCE_CUTOFF': 0.50,
            'RHO_TRIGER': 3,
            'PRINT_FORCES': 0,
            'PRINT_ATOMS': 0,
            'PRINT_EIGEN': 0,
            'PRINT_DENSITY': 0,
            'PRINT_RESTART_FQ': 1,
            'PRINT_RESTART': 1,
            'PSEUDOPOTENTIAL_LOCAL': None,
            'PSEUDOPOTENTIAL_FILE': None,
            'OUTPUT_FILE': None,
            'CELL': None,
            'FD_GRID': None,
            'FD_ORDER': 12,
            'ELEC_TEMP': 315.775131,
            'ELEC_TEMP_TYPE': None,
            'CHEB_DEGREE': 25,
            #'NTYPES': None,
            'NP_KPOINT_PARAL': None,
            'NP_BAND_PARAL': None,
            'NP_DOMAIN_PARAL': None,
            'NP_DOMAIN_PHI_PARAL': None,

            'TOL_RELAX': 1.00E-03,
            'PRINT_RELAXOUT': 0,
            'RELAX_FLAG': 0,
            'RELAX_METHOD': None,
            'RELAX_MAXITER': 300,
            'RELAX_NITER': 300,
            'NLCG_sigma': 0.500000,
            'L_HISTORY': 20,
            'L_FINIT_STP': 0.005000,
            'L_MAXMOV': 0.200000,
            'L_AUTOSCALE': 1,
            'L_LINEOPT': 1,
            'L_ICURV': 1.000000,

            'MD_FLAG': None,
            'MD_METHOD': None,
            'MD_TIMESTEP': None,
            'MD_NSTEP': None,
            'PRINT_RESTART_FQ': None,
            'RESTART_FLAG': None,
            'ION_TEMP': None,
            'ION_ELEC_EQT': None,

                        }

equivalencies = {
            'xc': 'EXCHANGE_CORRELATION',
            'kpts': 'KPOINT_GRID',
            'nbands': 'NSTATES',

            'gpts': 'FD_GRID'

            }


class SPARC(FileIOCalculator):


    def __init__(self, restart=None, ignore_bad_restart_file=False,
                 label='sprc-calc', atoms=None, command=None, directory = '.',
                 **kwargs):
        FileIOCalculator.__init__(self, restart=None, ignore_bad_restart_file=False,
                 label=None, atoms=None, command=None, directory = directory, **kwargs)

        # setting up label
        ## TODO: figure out how to do this with ASE calculator default classes
        if self.directory != '.' and '/' in label:
            raise CalculatorSetupError('cannot set both directory and input `/` in the label name')
        elif '/' in label:
            directory, label = label.split('/')
        self.directory = directory
        self.label = label

        # check that all arguements are legitimate arguements
        for arg in kwargs.items():
            if arg not in default_parameters.keys() or arg not in equivalencies.keys():
                raise InputError('the arguement {} was not found in the list of allowable arguments')

        FileIOCalculator.set(self, **kwargs)

    def write_input(self, atoms = None, **kwargs):
        if atoms == None:
            if self.atoms == None:
                raise InputError('An atoms object must be provided or the calculator object must have atoms attached to write an input file')
            atoms = self.atoms
        FileIOCalculator.write_input(self, atoms)

        f = open(os.path.join(self.directory, self.label + '.inpt'), 'w')

        # make all kwargs upper case
        for arg in kwargs:
            if arg in default_parameters:
                kwargs[arg.upper()] = kwargs.pop(arg)

        ############## Begin writing the file ####################
        f.write('# Input File Generated By SPARC ASE Calculator #\n')

        # deal with the finite differnce grid
        if 'h' in kwargs and 'FD_GRID' in kwargs:
            raise CalculatorSetupError('You cannot specify a grid spacing (h) and input the FD_GRID input arguement at the same time')
        if 'h' not in kwargs and 'FD_GRID' not in kwargs:
            raise Warning('neither a grid spacing (h) nor a finite difference grid (FD_GRID) has been specified, this is not ideal. A default value of h = 0.15 angstrom has been inserted.')
            kwargs['h'] = 0.15
        
        if 'h' in kwargs:
           fd_grid = h2gpts(kwargs['h']) 
        if 'FD_GRID' in kwargs:
            if type(kwargs['FD_GRID']) == str:
                fd_grid = kwargs['FD_GRID'].split()
                if len(fd_grid) != 3:
                    raise InputError('If a string is passed in for the FD_GRID flag it must be able to split into a list of dimension 3 with .split()')
            fd_grid = list(kwargs['FD_GRID'])
            if len(fd_grid) != 3:
                raise InputError('if an iterable type is used for the FD_GRID flag, it must be have dimension 3')
        f.write('{} {} {}\n'.format(*fd_grid))



        # all non-required inputs
        for arg, value in kwargs.items():
            if arg not in required_inputs:
                f.write('{}: {}'.format(arg, value))
        f.close()
